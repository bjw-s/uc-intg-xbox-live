name: "Build & Draft Release"

on:
  workflow_dispatch:

env:
  INTG_NAME: xbox_widget
  PYTHON_VER: 3.11.12-0.3.0

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.get-version-and-id.outputs.VERSION }}
      driver_id: ${{ steps.get-version-and-id.outputs.DRIVER_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version and id from driver.json
        id: get-version-and-id
        run: |
          echo "VERSION=$(jq .version -r driver.json)" >> $GITHUB_ENV
          echo "DRIVER_ID=$(jq .id -r driver.json)" >> $GITHUB_ENV
          echo "VERSION=$(jq .version -r driver.json)" >> $GITHUB_OUTPUT
          echo "DRIVER_ID=$(jq .id -r driver.json)" >> $GITHUB_OUTPUT

      - name: Build with PyInstaller
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-system-arm binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "Starting pyinstaller build for intg-${{ env.DRIVER_ID }}"
          docker run --rm --name builder \
            --platform=aarch64 \
            --user=$(id -u):$(id -g) \
            -v ${GITHUB_WORKSPACE}:/workspace \
            docker.io/unfoldedcircle/r2-pyinstaller:${PYTHON_VER} \
            bash -c \
            "cd /workspace && \
             python -m pip install -e . && \
             pyinstaller --clean --onedir --name intg-${DRIVER_ID} --collect-all zeroconf uc_intg_${INTG_NAME}/driver.py"

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts/bin
          mv dist/intg-${{ env.DRIVER_ID }}/* artifacts/bin
          mv artifacts/bin/intg-${{ env.DRIVER_ID }} artifacts/bin/driver
          cp driver.json artifacts/
          echo "ARTIFACT_NAME=uc-intg-${{ env.DRIVER_ID }}-${{ env.VERSION }}-aarch64" >> $GITHUB_ENV

      - name: Create upload artifact archive
        shell: bash
        run: |
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/artifacts .

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3

  release:
    name: Create Release
    runs-on: ubuntu-24.04
    needs: [build]
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Extract build archives
        run: |
          for D in *; do
            if [ -d "${D}" ]; then
              mv $D/* ./
            fi
          done;

      - name: Create hash file
        run: |
          for filename in *.tar.gz; do
            echo "sha256  `sha256sum $filename`" >> ${{needs.build.outputs.driver_id}}.hash;
          done;

      - name: Create release draft
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.tar.gz,${{needs.build.outputs.driver_id}}.hash"
          draft: true
          generateReleaseNotes: true
          artifactErrorsFailBuild: true
          tag: v${{needs.build.outputs.version}}